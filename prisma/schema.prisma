// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  name          String
  document      String?
  phone         String
  password_hash String
  admin         Boolean @default(false)
  is_confirmed  Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  squad        Squad[]
  work_times   WorkTimes[]
  squad_member SquadMember[]
  meetings     Meetings[]
  invite       Invite[]
  integration  Integration[]

  @@map("users")
}

model Invite {
  id String @id @default(uuid())

  name  String
  email String
  token String

  squad    Squad  @relation(fields: [squad_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  squad_id String

  user_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@map("invites")
}

model Squad {
  id          String @id @default(uuid())
  name        String
  description String

  weekly_hours      Json?   @default("{}")
  theme_color       String?
  background_color  String?
  meetings_duration Float

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  work_times   WorkTimes[]
  squad_member SquadMember[]
  meetings     Meetings[]
  invite       Invite[]

  @@map("squads")
}

model SquadMember {
  id String @id @default(uuid())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  squad    Squad  @relation(fields: [squad_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  squad_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("squad_members")
}

model WorkTimes {
  id           String @id @default(uuid())
  weekly_hours Json   @default("{}")

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  squad    Squad  @relation(fields: [squad_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  squad_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("work_times")
}

model Meetings {
  id String @id @default(uuid())

  name        String
  description String?

  email String
  phone String

  selected_date DateTime
  selected_time String
  timezone      String?
  end_time      String

  link String?

  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_id String

  squad    Squad  @relation(fields: [squad_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  squad_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("meetings")
}

model Integration {
  id String @id @default(uuid())

  name String

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at        DateTime               @default(now())
  updated_at        DateTime               @updatedAt
  googleIntegration GoogleIntegrationData?

  @@map("integrations")
}

model GoogleIntegrationData {
  id String @id @default(cuid())

  access_token String

  refresh_token String

  scope String

  token_type String

  email String?

  expiry_date BigInt

  integration    Integration @relation(fields: [integration_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  integration_id String      @unique

  createdAt DateTime @default(now())

  updatedAt DateTime @default(now()) @updatedAt
}
